'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createQuery = function createQuery(args, create) {
  var type = undefined,
      name = undefined,
      postType = undefined,
      queryOptions = undefined,
      file = undefined;

  if (create) {
    type = args[0];
    name = args[1];
    postType = args[2];
    queryOptions = args[3];
    file = './' + type + '-' + name + '.php';
  } else {
    file = args[0];
    postType = args[1];
  }

  var postTypeUnderscore = postType.replace(/-/g, '_');

  _fs2.default.readFile(file, 'utf8', function (err, data) {
    if (err) {
      console.log(err);
    } else {
      checkTemplateForExistingQuery(data);
    }
  });

  function checkTemplateForExistingQuery(data) {

    var existingQuery = '$' + postTypeUnderscore + '_args';

    if (data.indexOf(existingQuery) == -1) {
      writeQuery(data);
    } else {
      console.log('That query already exists');
    }
  }

  function writeQueryOptions(options) {
    var optionsString = '';
    Object.keys(options).map(function (option) {
      var value = options[option];
      optionsString += ' "' + option + '"\t\t\t=> "' + value + '",\n ';
    });

    return optionsString;
  }

  function writeQuery(data) {
    var queryOptionsText = queryOptions ? writeQueryOptions(queryOptions) : '';
    var queryText = '$' + postTypeUnderscore + '_args = array( \n ' + ' "post_type"\t\t\t=> "' + postType + '",\n ' + queryOptionsText + ');';
    var query = data.replace(/(<\?php)/, "<?php \n\n " + queryText);
    addQueryToContext(query);
  }

  function addQueryToContext(query) {

    var contextText = '$context["' + postTypeUnderscore + '"] = Timber::get_posts($' + postTypeUnderscore + '_args);';
    var newQuery = query.replace(/\$context\[\"post\"\] = \$post;/, '$context["post"] = $post;\n' + contextText);

    _fs2.default.writeFile(file, newQuery, function (err, res) {
      if (err) {
        console.log(err);
      } else {
        console.log('Query added to ' + file);
      }
    });
  }
};

exports.default = createQuery;